{"version":3,"file":"static/js/433.1904d9ed.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","redux/filterSlice.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ContactData = styled.p`\n  display: inline-block;\n  margin-right: 5px;\n`;\nexport const List = styled.ul`\n  width: 400px;\n`;\nexport const Item = styled.li`\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n  margin: 10px 0;\n`;\nexport const NameContact = styled.p`\n  font-weight: 700;\n`;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: '',\n  reducers: {\n    filterContacts(state, action) {\n      return (state = action.payload);\n    },\n  },\n});\n\nexport const { filterContacts } = filterSlice.actions;\nexport const getFilter = state => state.filter;\nexport const filterReducer = filterSlice.reducer;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactData, Item, List, NameContact } from './ContactList.styled';\nimport { getContacts } from 'redux/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport { deleteContacts } from 'redux/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    if (contacts) {\n      const normalizedFilter = filterValue.toLowerCase();\n      const nameFilter = contacts.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter)\n      );\n      return nameFilter;\n    } else {\n      return;\n    }\n  };\n  const visibleContacts = getVisibleContacts();\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, phone }) => (\n        <Item key={id}>\n          <ContactData>\n            <NameContact>{name}</NameContact>\n            <p>{phone}</p>\n          </ContactData>\n          <button type=\"button\" onClick={() => dispatch(deleteContacts(id))}>\n            Delete\n          </button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\nexport const Form = styled(FormikForm)`\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { FormField, Form, ErrorMessage } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contactsSlice';\nimport { addContacts } from 'redux/operations';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  phone: Yup.string().min(6).required(),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const onSave = (values, actions) => {\n    console.log(values);\n    const isRepeadCheck = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isRepeadCheck) {\n      actions.resetForm();\n      return alert(`${values.name} is already in contacts.`);\n    }\n    dispatch(addContacts(values));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={onSave}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field type=\"tel\" name=\"phone\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const Input = styled.input`\n  display: block;\n  margin-top: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts, getFilter } from 'redux/filterSlice';\nimport { Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={onChange} />\n    </label>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/operations';\nimport { getContacts, getError, getIsLoading } from 'redux/contactsSlice';\nimport ContactList from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts && <ContactList />}\n    </>\n  );\n}\n"],"names":["ContactData","styled","List","Item","NameContact","filterSlice","createSlice","name","initialState","reducers","filterContacts","state","action","payload","actions","getFilter","filter","reducer","contacts","useSelector","getContacts","filterValue","dispatch","useDispatch","visibleContacts","normalizedFilter","toLowerCase","includes","getVisibleContacts","map","id","phone","type","onClick","deleteContacts","Form","FormikForm","FormField","ErrorMessage","FormikError","FormSchema","Yup","shape","min","max","required","ContactForm","initialValues","validationSchema","onSubmit","values","console","log","some","resetForm","alert","addContacts","component","Input","Filter","value","onChange","e","target","Contacts","isLoading","getIsLoading","error","getError","useEffect","fetchContacts","Helmet"],"sourceRoot":""}