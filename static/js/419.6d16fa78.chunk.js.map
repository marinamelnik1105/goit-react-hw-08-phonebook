{"version":3,"file":"static/js/419.6d16fa78.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ContactData = styled.p`\n  display: inline-block;\n  margin-right: 5px;\n`;\nexport const List = styled.ul`\n  width: 400px;\n`;\nexport const Item = styled.li`\n  height: 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n  margin: 10px 0;\n`;\nexport const NameContact = styled.p`\n  font-weight: 700;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { ContactData, Item, List, NameContact } from './ContactList.styled';\nimport { getContacts } from 'redux/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport { deleteContacts } from 'redux/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const getVisibleContacts = () => {\n    if (filterValue) {\n      const normalizedFilter = filterValue.toLowerCase();\n      const nameFilter = contacts.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter)\n      );\n      return nameFilter;\n    } else {\n      return contacts;\n    }\n  };\n\n  const visibleContacts = getVisibleContacts();\n  return (\n    <List>\n      {visibleContacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <ContactData>\n            <NameContact>{name}</NameContact>\n            <p>{number}</p>\n          </ContactData>\n          <button type=\"button\" onClick={() => dispatch(deleteContacts(id))}>\n            Delete\n          </button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\nimport { Form as FormikForm, ErrorMessage as FormikError } from 'formik';\nexport const Form = styled(FormikForm)`\n  padding: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: tomato;\n`;\n","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { FormField, Form, ErrorMessage } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contactsSlice';\nimport { addContacts } from 'redux/operations';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string().min(6).required(),\n});\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const onSave = (values, actions) => {\n    console.log(values);\n    const isRepeadCheck = contacts.some(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isRepeadCheck) {\n      actions.resetForm();\n      return alert(`${values.name} is already in contacts.`);\n    }\n    dispatch(addContacts(values));\n    actions.resetForm();\n  };\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={onSave}\n    >\n      <Form>\n        <FormField>\n          Name\n          <Field name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </FormField>\n        <FormField>\n          Number\n          <Field type=\"tel\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </FormField>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const Input = styled.input`\n  display: block;\n  margin-top: 5px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts, getFilter } from 'redux/filterSlice';\nimport { Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <Input type=\"text\" value={filter} onChange={onChange} />\n    </label>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/operations';\nimport { getContacts, getError, getIsLoading } from 'redux/contactsSlice';\nimport ContactList from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts && <ContactList />}\n    </>\n  );\n}\n"],"names":["ContactData","styled","List","Item","NameContact","contacts","useSelector","getContacts","filterValue","getFilter","dispatch","useDispatch","visibleContacts","normalizedFilter","toLowerCase","filter","name","includes","getVisibleContacts","map","id","number","type","onClick","deleteContacts","Form","FormikForm","FormField","ErrorMessage","FormikError","FormSchema","Yup","shape","min","max","required","ContactForm","initialValues","validationSchema","onSubmit","values","actions","console","log","some","resetForm","alert","addContacts","component","Input","Filter","value","onChange","e","filterContacts","target","Contacts","isLoading","getIsLoading","error","getError","useEffect","fetchContacts","Helmet"],"sourceRoot":""}